# -*- coding: utf-8 -*-
"""E-Commerce Database.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a_B74YTM1TG99KxvYKh-EA8Gg18amX3s
"""

# Filtering out the warnings

import warnings
warnings.filterwarnings('ignore')

# Importing the required libraries

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Reading the data
data = pd.read_csv('/content/Amazon Sale Report.csv')

data.head()

# Check the number of rows and columns in the dataframe
data.shape

# Check the column-wise info of the dataframe
data.info(verbose=True)

# Check missing values in each column
missing_summary = data.isnull().sum().sort_values(ascending=False)

missing_percentage = (missing_summary / len(data)) * 100
missing_df = pd.DataFrame({
    'Missing Count': missing_summary,
    'Missing Percentage': missing_percentage.round(2)
})

missing_df

# Clean data: Drop 'Unnamed: 22' and fill in optional values
df_cleaned = data.drop(columns=['Unnamed: 22'])

# Fill missing values with placeholders where appropriate
df_cleaned['promotion-ids'] = df_cleaned['promotion-ids'].fillna('No Promotion')
df_cleaned['fulfilled-by'] = df_cleaned['fulfilled-by'].fillna('Unknown')
#df_cleaned['Courier Status'] = df_cleaned['Courier Status'].fillna('Not Available')

mode_value = df_cleaned['Courier Status'].mode()[0]
df_cleaned['Courier Status'] = df_cleaned['Courier Status'].fillna(mode_value)

mode_value = df_cleaned['currency'].mode()[0]
df_cleaned['currency'] = df_cleaned['currency'].fillna(mode_value)

# Drop rows with missing currency or amount
#df_cleaned = df_cleaned.dropna(subset=['currency', 'Amount'])

# For address columns with very minor missing data, drop those rows
df_cleaned = df_cleaned.dropna(subset=['ship-city', 'ship-state', 'ship-postal-code', 'ship-country'])

# Reset index after cleaning
df_cleaned.reset_index(drop=True, inplace=True)

# Summary of cleaned data
cleaned_shape = df_cleaned.shape
cleaned_missing = df_cleaned.isnull().sum().sum()

cleaned_shape, cleaned_missing

df_cleaned.isnull().values.any()

df_cleaned.isnull().sum().sum()

df_cleaned.isnull().sum()

mean_amount = df_cleaned['Amount'].mean()
df_cleaned['Amount'] = df_cleaned['Amount'].fillna(mean_amount)

df_cleaned.isnull().sum()

df_cleaned.isnull().values.any()

df_cleaned.drop('index', axis=1, inplace=True)

df_cleaned = df_cleaned.drop_duplicates(subset='Order ID', keep='last')
print(df_cleaned)

duplicates = df_cleaned['Order ID'].duplicated()

# Show only duplicated rows
print(df_cleaned[duplicates])

# Check the column-wise info of the dataframe
df_cleaned.info(verbose=True)

# Check the number of rows and columns in the dataframe
df_cleaned.shape

df_cleaned = df_cleaned.rename(columns={'Order ID': 'order_id', 'Date': 'order_date', 'Status': 'status', 'Fulfilment': 'fulfilment',  'Sales Channel ': 'sales_channel', 'ship-service-level': 'ship_service_level', 'Style': 'style',
                                        'SKU': 'sku', 'Category': 'category','Size': 'size', 'ASIN': 'asin', 'Courier Status': 'courier_status', 'Qty': 'qty', 'currency': 'currency', 'Amount': 'amount', 'ship-city': 'ship_city',
                                        'ship-state': 'ship_state', 'ship-postal-code': 'ship_postal_code', 'ship-country': 'ship_country', 'promotion-ids': 'promotion_ids', 'B2B': 'b2b', 'fulfilled-by': 'fulfilled_by'})

df_cleaned.info(verbose=True)

print(df_cleaned.columns.tolist())

# Split into three dataframes by columns
df1 = df_cleaned[['order_id', 'order_date', 'status','fulfilment','sales_channel','ship_service_level','sku','qty','currency','amount','promotion_ids','b2b' ]]
df2 = df_cleaned[['sku', 'style', 'category','size','asin']]
df3 = df_cleaned[['order_id', 'courier_status', 'ship_city','ship_state','ship_postal_code','ship_country','fulfilled_by']]

# Write to new CSV files
df1.to_csv('orders.csv', index=False)
df2.to_csv('products.csv', index=False)
df3.to_csv('shipping.csv', index=False)

import matplotlib.pyplot as plt
import seaborn as sns

# Set style for plots
sns.set(style="whitegrid")

# Order Status Distribution
status_counts = df_cleaned['status'].value_counts()

# Top 10 Categories
top_categories = df_cleaned['category'].value_counts().head(10)

# Plotting
fig, axes = plt.subplots(1, 2, figsize=(18, 6))

# Order Status Plot (categorical on x-axis)
sns.barplot(x=status_counts.index, y=status_counts.values, ax=axes[0], palette='viridis')
axes[0].set_title('Order Status Distribution')
axes[0].set_xlabel('Status')
axes[0].set_ylabel('Count')
axes[0].tick_params(axis='x', rotation=90,labelsize=10)

# Top Categories Plot (categorical on x-axis)
sns.barplot(x=top_categories.index, y=top_categories.values, ax=axes[1], palette='mako')
axes[1].set_title('Top 10 Product Categories')
axes[1].set_xlabel('Category')
axes[1].set_ylabel('Count')
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

df_cleaned.to_csv("Amazon_Sales_Cleaned_Data.csv", index=False)

